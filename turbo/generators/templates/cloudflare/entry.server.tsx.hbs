/**
* By default, Remix will handle generating the HTTP Response for you.
* You are free to delete this file if you'd like to, but if you ever want it revealed again, you can run `npx remix reveal` âœ¨
* For more information, see https://remix.run/file-conventions/entry.server
*/
import { ServerRouter } from 'react-router';
import type { AppLoadContext, EntryContext } from 'react-router';

import { isbot } from 'isbot';
import { renderToReadableStream } from 'react-dom/server';

import { createI18nServerInstance } from '~/lib/i18n/i18n.server';
export default function handleRequest(
request: Request,
responseStatusCode: number,
responseHeaders: Headers,
reactRouterContext: EntryContext,
// This is ignored so we can keep it in the template for visibility.  Feel
// free to delete this parameter in your app if you're not using it!
// eslint-disable-next-line @typescript-eslint/no-unused-vars
loadContext: AppLoadContext,
) {
return isbot(request.headers.get('user-agent') || '')
? handleBotRequest(
request,
responseStatusCode,
responseHeaders,
reactRouterContext,
)
: handleBrowserRequest(
request,
responseStatusCode,
responseHeaders,
reactRouterContext,
);
}

async function handleBotRequest(
request: Request,
responseStatusCode: number,
responseHeaders: Headers,
reactRouterContext: EntryContext,
) {
await createI18nServerInstance(request);

let shellRendered = false;

const body = await renderToReadableStream(
<ServerRouter context={reactRouterContext} url={request.url} />,
{
onError(error: unknown) {
responseStatusCode = 500;
// Log streaming rendering errors from inside the shell.  Don't log
// errors encountered during initial shell rendering since they'll
// reject and get logged in handleDocumentRequest.
if (shellRendered) {
console.error(error);
}
},
},
);

shellRendered = true;

return new Response(body);
}

async function handleBrowserRequest(
request: Request,
responseStatusCode: number,
responseHeaders: Headers,
reactRouterContext: EntryContext,
) {
await createI18nServerInstance(request);

let shellRendered = false;

const body = await renderToReadableStream(
<ServerRouter context={reactRouterContext} url={request.url} />,
{
onError(error: unknown) {
responseStatusCode = 500;
// Log streaming rendering errors from inside the shell.  Don't log
// errors encountered during initial shell rendering since they'll
// reject and get logged in handleDocumentRequest.
if (shellRendered) {
console.error(error);
}
},
},
);

shellRendered = true;

responseHeaders.set("Content-Type", "text/html");

return new Response(body, {
status: responseStatusCode,
headers: responseHeaders,
});
}

export async function handleError(error: unknown) {
const { getServerMonitoringService } = await import('@kit/monitoring/server');

const service = await getServerMonitoringService();

if (error instanceof Error) {
return service.captureException(error);
} else {
const serverError = new Error(`Server Error: ${JSON.stringify(error)}`);

return service.captureException(serverError);
}
}
